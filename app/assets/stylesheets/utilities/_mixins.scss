@function colour($name) {
  @return map-get($colours, $name);
}

// stylelint-disable
@mixin respond-to($point, $condition: max-width) {
  // Ensure media query isn't in quotes
  $condition: unquote($condition);
  // Check global breakpoints first
  @if map-has-key($breakpoints, $point) {
    @media ($condition: map-get($breakpoints, $point)) {
      @content;
    }
    // Failing that, check local tweakpoints
  } @else if map-has-key($tweakpoints, $point) {
    @media ($condition: map-get($tweakpoints, $point)) {
      @content;
    }
  } @else {
    @warn 'Could not find `#{$point}` in both local ($tweakpoints) and global ($breakpoints) contexts. Media block omitted.';
  }
}

@mixin supports-grid {
  @supports(display: grid) {
    @content;
  }
}

@mixin font-family($font-stack, $important: false) {
  $font-stack: map-get($font-stacks, $font-stack);

  @if $font-stack {
    @if $important == false {
      font-family: map-get($font-stack, font-family);
    } @else {
      font-family: map-get($font-stack, font-family) !important;
    }
    font-weight: map-get($font-stack, font-weight);
    font-style: map-get($font-stack, font-style);
  } @else {
    @error 'The font family '#{$font-stack}' does not exist in the list of font families!';
  }
}

@mixin font-size($size) {
  $font-size-properties: map-get($font-sizes, $size);

  @if $font-size-properties {
    @include font-size(map-get($font-size-properties, font-size));
    line-height: map-get($font-size-properties, line-height);
  } @else {
    font-size: #{$size}px;
    font-size: #{$size / 10}rem;
  }
}

@mixin font($font-stack, $font-size, $caps: false, $responsive: true) {
  $font-size-properties: map-get($font-sizes, $font-size);
  $tweaks: map-get($font-tweaks, #{$font-stack}-#{$font-size});
  $type-breakpoints: map-get($font-size-properties, breakpoints);

  @include font-size($font-size);
  @include font-family($font-stack);

  @if $tweaks {
    @each $tweak-property, $tweak-value in $tweaks {
      #{$tweak-property}: #{$tweak-value};
    }
  }

  @if $caps == true {
    text-transform: uppercase;
  } @else {
    text-transform: none;
  }

  @if $responsive == true {
    @if type-breakpoints {
      @each $breakpoint-name, $breakpoint-font-properties in $type-breakpoints {
        @if $breakpoint-name and $breakpoint-font-properties {
          @include respond-to($breakpoint-name) {
            @each $breakpoint-font-property, $breakpoint-font-value in $breakpoint-font-properties {
              @if $breakpoint-font-property == 'font-size' {
                @include font-size($breakpoint-font-value);
              } @else {
                #{$breakpoint-font-property}: #{$breakpoint-font-value};
              }
            }
          }
        }
      }
    }
  }
}

@mixin spacing($property, $size) {
  $spacing-properties: map-get($spacing, $size);
  $spacing-breakpoints: map-get($spacing-properties, breakpoints);

  @if $spacing-properties {
    #{$property}: map-get($spacing-properties, space);
  }

  @if spacing-breakpoints {
    @each $breakpoint-name, $breakpoint-spacing in $spacing-breakpoints {
      @if $breakpoint-name and $breakpoint-spacing {
        @include respond-to($breakpoint-name) {
          #{$property}: map-get($breakpoint-spacing, space);
        }
      }
    }
  }
}

@mixin clearfix {
  &::before,
  &::after {
    content: '';
    display: table;
  }

  &::after {
    clear: both;
  }
}
// stylelint-enable
